import type { UseChatHelpers } from "@ai-sdk/react";
import { CopyIcon, CpuIcon, GlobeIcon } from "lucide-react";
import React from "react";
import { toast } from "sonner";
import { formatTokens } from "~/lib/format-tokens";
import { getMessageContentFromParts } from "~/lib/get-message-content-from-parts";
import { useAppearanceStore } from "~/stores/appearance-store";
import type { CustomUIMessage } from "~/types";
import AIResponseContent from "./ai-response-content";
import AIResponseReasoning from "./ai-response-reasoning";
import AIResponseSources from "./ai-response-sources";
import BranchOffButton from "./branch-off-button";
import RetryModelDropdown from "./retry-model-dropdown";
import { Button } from "./ui/button";
import { Tooltip, TooltipContent, TooltipTrigger } from "./ui/tooltip";

type Props = {
  message: CustomUIMessage;
  regenerate?: UseChatHelpers<CustomUIMessage>["regenerate"];
};

export default React.memo(function AssistantMessage(props: Props) {
  const { message, regenerate } = props;
  const showTokenUsage = useAppearanceStore((store) => store.showTokenUsage);

  if (message.parts.length === 0) {
    return null;
  }

  const messageContent = getMessageContentFromParts(message.parts);

  return (
    <div className="group space-y-3 lg:space-y-4">
      <AIResponseReasoning
        messageContent={messageContent}
        messageId={message.id}
        parts={message.parts}
      />
      <AIResponseContent
        messageContent={messageContent}
        messageId={message.id}
      />
      <AIResponseSources parts={message.parts} />

      {/* Message actions */}
      <div className="flex items-center gap-3 duration-200 md:opacity-0 group-hover:md:opacity-100 lg:gap-4">
        <div className="flex items-center gap-1">
          <Tooltip>
            <TooltipTrigger asChild>
              <Button
                onClick={async () => {
                  await navigator.clipboard.writeText(messageContent);
                  toast.success("Copied to clipboard");
                }}
                size="icon"
                variant="ghost"
              >
                <CopyIcon />
              </Button>
            </TooltipTrigger>
            <TooltipContent>Copy to clipboard</TooltipContent>
          </Tooltip>

          <BranchOffButton message={message} />

          {regenerate && (
            <RetryModelDropdown message={message} regenerate={regenerate} />
          )}

          <span className="text-muted-foreground text-xs">
            {message.metadata?.model}
          </span>

          {message.parts.filter(
            (part) =>
              part.type === "source-document" || part.type === "source-url"
          ).length > 0 && (
            <Tooltip>
              <TooltipTrigger>
                <GlobeIcon className="size-3 text-muted-foreground" />
              </TooltipTrigger>
              <TooltipContent>
                Content was generated by web search
              </TooltipContent>
            </Tooltip>
          )}
        </div>

        {showTokenUsage && message.metadata?.totalTokens && (
          <div className="flex items-center gap-1 text-muted-foreground text-xs">
            <CpuIcon className="size-4" />
            {formatTokens(message.metadata?.totalTokens)}
          </div>
        )}
      </div>
    </div>
  );
});
